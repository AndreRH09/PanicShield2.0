package com.example.panicshield.data.sms

import android.content.Context
import android.content.pm.PackageManager
import android.telephony.SmsManager
import android.util.Log
import androidx.core.content.ContextCompat
import com.example.panicshield.domain.model.PanicAlert
import kotlinx.coroutines.suspendCancellableCoroutine
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException

class SmsHelper(private val context: Context) {

    companion object {
        private const val TAG = "SmsManager"
        private const val PERMISSION_SEND_SMS = android.Manifest.permission.SEND_SMS
    }

    private val smsManager: SmsManager = SmsManager.getDefault()

    fun sendSms(phone: String, message: String) {
        smsManager.sendTextMessage(phone, null, message, null, null)
    }

    /**
     * Verificar si tenemos permisos para enviar SMS
     */
    fun hasSmsPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            context,
            PERMISSION_SEND_SMS
        ) == PackageManager.PERMISSION_GRANTED
    }

    /**
     * Simular la conexi√≥n (para mantener compatibilidad con el c√≥digo existente)
     */
    suspend fun connect(): Boolean = suspendCancellableCoroutine { continuation ->
        try {
            if (hasSmsPermission()) {
                Log.i(TAG, "‚úÖ Permisos SMS disponibles")
                continuation.resume(true)
            } else {
                Log.e(TAG, "‚ùå Sin permisos para enviar SMS")
                continuation.resumeWithException(Exception("Sin permisos SMS"))
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error verificando permisos SMS", e)
            continuation.resumeWithException(e)
        }
    }

    /**
     * Enviar SMS de alerta de p√°nico
     */
    suspend fun publishPanicAlert(contactPhone: String, panicData: PanicAlert): Boolean =
        suspendCancellableCoroutine { continuation ->
            try {
                // ‚úÖ VERIFICAR PERMISOS PRIMERO
                if (!hasSmsPermission()) {
                    Log.e(TAG, "‚ùå Sin permisos para enviar SMS")
                    continuation.resumeWithException(Exception("Sin permisos SMS"))
                    return@suspendCancellableCoroutine
                }

                // ‚úÖ LIMPIAR N√öMERO DE TEL√âFONO
                val cleanPhone = contactPhone.replace("+", "").replace(" ", "").replace("-", "")

                // ‚úÖ CREAR MENSAJE SMS
                val smsMessage = createSmsMessage(panicData)

                Log.d(TAG, "üì± Enviando SMS de alerta:")
                Log.d(TAG, "   üë§ Tel√©fono contacto: $contactPhone")
                Log.d(TAG, "   üìû N√∫mero limpio: $cleanPhone")
                Log.d(TAG, "   üìù Mensaje: $smsMessage")

                // ‚úÖ VERIFICAR QUE EL MENSAJE NO EST√â VAC√çO
                if (smsMessage.isBlank()) {
                    Log.e(TAG, "‚ùå Mensaje SMS vac√≠o")
                    continuation.resumeWithException(Exception("Mensaje SMS vac√≠o"))
                    return@suspendCancellableCoroutine
                }

                // ‚úÖ ENVIAR SMS
                try {
                    val smsManager = SmsManager.getDefault()

                    // Si el mensaje es muy largo, dividirlo en partes
                    if (smsMessage.length > 160) {
                        val parts = smsManager.divideMessage(smsMessage)
                        smsManager.sendMultipartTextMessage(
                            cleanPhone,
                            null,
                            parts,
                            null,
                            null
                        )
                        Log.i(TAG, "‚úÖ SMS multiparte enviado a: $cleanPhone")
                    } else {
                        smsManager.sendTextMessage(
                            cleanPhone,
                            null,
                            smsMessage,
                            null,
                            null
                        )
                        Log.i(TAG, "‚úÖ SMS enviado a: $cleanPhone")
                    }

                    continuation.resume(true)

                } catch (smsException: Exception) {
                    Log.e(TAG, "‚ùå Error al enviar SMS: ${smsException.message}", smsException)
                    continuation.resumeWithException(smsException)
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error general al enviar SMS", e)
                continuation.resumeWithException(e)
            }
        }

    /**
     * Crear mensaje SMS formateado
     */
    private fun createSmsMessage(panicData: PanicAlert): String {
        return buildString {
            append("üö® ALERTA DE P√ÅNICO üö®\n")
            append("De: ${panicData.userName}\n")
            append("Tel√©fono: ${panicData.userPhone}\n")
            append("Tipo: ${panicData.emergencyType}\n")
            append("Mensaje: ${panicData.message}\n")
            append("Ubicaci√≥n: ${panicData.address}\n")
            append("Coordenadas: ${panicData.latitude}, ${panicData.longitude}\n")
            append("Prioridad: ${panicData.priority}\n")
            append("Hora: ${java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss", java.util.Locale.getDefault()).format(java.util.Date(panicData.timestamp))}")
        }
    }

    /**
     * Suscribirse a alertas (no aplicable para SMS, pero mantenemos compatibilidad)
     */
    suspend fun subscribeToUserAlerts(userPhone: String): Boolean =
        suspendCancellableCoroutine { continuation ->
            try {
                Log.i(TAG, "üì¨ SMS no requiere suscripci√≥n (recepci√≥n autom√°tica)")
                continuation.resume(true)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error en subscribeToUserAlerts", e)
                continuation.resumeWithException(e)
            }
        }

    /**
     * Desconectar (no aplicable para SMS)
     */
    fun disconnect() {
        Log.i(TAG, "üì± SMS Manager desconectado")
    }

    /**
     * Verificar si est√° "conectado" (si tiene permisos)
     */
    fun isConnected(): Boolean {
        return hasSmsPermission()
    }

    /**
     * Enviar SMS simple (funci√≥n adicional)
     */
    fun sendSimpleSms(phoneNumber: String, message: String): Boolean {
        return try {
            if (!hasSmsPermission()) {
                Log.e(TAG, "‚ùå Sin permisos SMS")
                return false
            }

            val smsManager = SmsManager.getDefault()
            val cleanPhone = phoneNumber.replace("+", "").replace(" ", "").replace("-", "")

            smsManager.sendTextMessage(cleanPhone, null, message, null, null)
            Log.i(TAG, "‚úÖ SMS simple enviado a: $cleanPhone")
            true
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error enviando SMS simple", e)
            false
        }
    }
}